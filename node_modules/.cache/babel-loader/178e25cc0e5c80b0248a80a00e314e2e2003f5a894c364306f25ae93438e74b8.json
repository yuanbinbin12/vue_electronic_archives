{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport axios from \"axios\";\nexport default {\n  namespaced: true,\n  mutations: {\n    setQRCodeIdArr(state, idArr) {\n      state.QRCodeIdArr = idArr;\n    },\n    setQrCodePictureArr(state, picture) {\n      state.QrCodePictureArr.push(picture);\n    },\n    clearQrCodePictureArr(state) {\n      while (state.QrCodePictureArr.pop()) {}\n    },\n    clearQRCodeIdArr(state) {\n      while (state.setQRCodeIdArr.pop()) {}\n    }\n  },\n  actions: {\n    getQRCodePictureArr(context, vc) {\n      context.commit(\"clearQrCodePictureArr\");\n      if (context.state.QRCodeIdArr === null || context.state.QRCodeIdArr === \"\" || context.state.QRCodeIdArr.length === 0) {\n        context.commit(\"grounding/setWarningMsg\", {\n          \"message\": \"请选择一条数据后再点击生成二维码！\",\n          \"type\": \"error\"\n        }, {\n          root: true\n        });\n        return;\n      }\n      var codeIdSum = 0;\n      var codeIdList = [];\n      context.state.QRCodeIdArr.forEach(codeIdMap => {\n        codeIdList.push(codeIdMap.cabinetName);\n        codeIdSum++;\n        if (codeIdSum % 4 === 0) {\n          axios.get(`/OSPApplication/general/generateQRCode/${codeIdList.join(\",\")}`, {\n            responseType: 'blob'\n          }).then(Response => {\n            const blob = new Blob([Response.data], {\n              type: Response.data.type\n            });\n            const imageUrl = URL.createObjectURL(blob);\n            context.commit(\"setQrCodePictureArr\", {\n              imageUrl,\n              height: \"1000px\"\n            });\n          });\n          codeIdList = [];\n          codeIdSum = 0;\n        }\n      });\n      if (codeIdList.length > 0) {\n        axios.get(`/OSPApplication/general/generateQRCode/${codeIdList.join(\",\")}`, {\n          responseType: 'blob'\n        }).then(Response => {\n          const blob = new Blob([Response.data], {\n            type: Response.data.type\n          });\n          const imageUrl = URL.createObjectURL(blob);\n          context.commit(\"setQrCodePictureArr\", {\n            imageUrl,\n            height: `${codeIdList.length * 250}px`\n          });\n        });\n      }\n      if (vc.$route.name !== \"ImgPicture\") {\n        vc.$router.push({\n          \"name\": \"ImgPicture\"\n        });\n        context.commit(\"clearQRCodeIdArr\");\n      }\n    }\n  },\n  state: {\n    QRCodeIdArr: [],\n    QrCodePictureArr: []\n  }\n};","map":{"version":3,"names":["axios","namespaced","mutations","setQRCodeIdArr","state","idArr","QRCodeIdArr","setQrCodePictureArr","picture","QrCodePictureArr","push","clearQrCodePictureArr","pop","clearQRCodeIdArr","actions","getQRCodePictureArr","context","vc","commit","length","root","codeIdSum","codeIdList","forEach","codeIdMap","cabinetName","get","join","responseType","then","Response","blob","Blob","data","type","imageUrl","URL","createObjectURL","height","$route","name","$router"],"sources":["C:/Users/ainizuofurong/Desktop/vue_electronic_archives/src/store/QRcode.js"],"sourcesContent":["import axios from \"axios\";\r\nexport default {\r\n    namespaced:true,\r\n    mutations:{\r\n        setQRCodeIdArr(state,idArr){\r\n            state.QRCodeIdArr = idArr;\r\n        },\r\n        setQrCodePictureArr(state,picture){\r\n            state.QrCodePictureArr.push(picture);\r\n        },\r\n        clearQrCodePictureArr(state){\r\n            while(state.QrCodePictureArr.pop()){}\r\n        },\r\n        clearQRCodeIdArr(state){\r\n            while(state.setQRCodeIdArr.pop()){}\r\n        }\r\n    },\r\n    actions:{\r\n       getQRCodePictureArr(context,vc){\r\n        context.commit(\"clearQrCodePictureArr\");\r\n        if(context.state.QRCodeIdArr===null || context.state.QRCodeIdArr === \"\" || context.state.QRCodeIdArr.length===0){\r\n            context.commit(\"grounding/setWarningMsg\",{\"message\":\"请选择一条数据后再点击生成二维码！\",\"type\":\"error\"},{root:true});\r\n            return;\r\n        }\r\n        var codeIdSum = 0;\r\n        var codeIdList = [];\r\n        context.state.QRCodeIdArr.forEach(codeIdMap => {\r\n            codeIdList.push(codeIdMap.cabinetName);\r\n            codeIdSum++;\r\n            if(codeIdSum%4===0){\r\n                axios.get(`/OSPApplication/general/generateQRCode/${codeIdList.join(\",\")}`,{\r\n                    responseType: 'blob'\r\n                }).then(Response=>{\r\n                        const blob = new Blob([Response.data], { type: Response.data.type });\r\n                        const imageUrl = URL.createObjectURL(blob);\r\n                        context.commit(\"setQrCodePictureArr\",{imageUrl,height:\"1000px\"});\r\n                });\r\n                codeIdList = [];\r\n                codeIdSum = 0;\r\n            }\r\n        });\r\n        if(codeIdList.length>0){\r\n            axios.get(`/OSPApplication/general/generateQRCode/${codeIdList.join(\",\")}`,{\r\n                responseType: 'blob'\r\n            }).then(Response=>{\r\n                    const blob = new Blob([Response.data], { type: Response.data.type });\r\n                    const imageUrl = URL.createObjectURL(blob);\r\n                    context.commit(\"setQrCodePictureArr\",{imageUrl,height:`${(codeIdList.length*250)}px`});\r\n            });\r\n        }\r\n        if(vc.$route.name !==\"ImgPicture\"){\r\n            vc.$router.push({\"name\":\"ImgPicture\"});\r\n            context.commit(\"clearQRCodeIdArr\");\r\n          }\r\n       }\r\n    },\r\n    state:{\r\n       QRCodeIdArr:[],\r\n       QrCodePictureArr:[]\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}