{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport axios from \"axios\";\n// import $ from \"jquery\";\nexport default {\n  namespaced: true,\n  mutations: {\n    setQRCodeIdArr(state, idArr) {\n      state.QRCodeIdArr = idArr;\n    },\n    setQrCodePictureArr(state, picture) {\n      state.QrCodePictureArr.push(picture);\n    },\n    clearQrCodePictureArr(state) {\n      if (state.QrCodePictureArr.length > 0) {\n        while (state.QrCodePictureArr.pop()) {}\n      }\n    },\n    clearQRCodeIdArr(state) {\n      if (state.QRCodeIdArr.length > 0) {\n        while (state.QRCodeIdArr.pop()) {}\n      }\n    },\n    sortQrCodePictureArr(state, length) {\n      var QrCodePictureArr = [];\n      if (length === state.QrCodePictureArr.length) {\n        for (let i = 1; i <= length; i++) {\n          for (let j = 0; j < length; j++) {\n            if (state.QrCodePictureArr[j].index === i) {\n              var QrCodePicture = state.QrCodePictureArr[j];\n              QrCodePictureArr.push(QrCodePicture);\n            }\n          }\n        }\n      }\n      console.log(QrCodePictureArr);\n    }\n  },\n  actions: {\n    getQRCodePictureArr(context, vc) {\n      context.commit(\"clearQrCodePictureArr\");\n      if (context.state.QRCodeIdArr === null || context.state.QRCodeIdArr === \"\" || context.state.QRCodeIdArr.length === 0) {\n        context.commit(\"grounding/setWarningMsg\", {\n          \"message\": \"请选择一条数据后再点击生成二维码！\",\n          \"type\": \"error\"\n        }, {\n          root: true\n        });\n        return;\n      }\n      var codeIdSum = 0;\n      var codeIdList = [];\n      var index = 0;\n      var lengthQrId = context.state.QRCodeIdArr.length;\n      context.state.QRCodeIdArr.map(codeIdMap => {\n        codeIdList.push(codeIdMap.cabinetName);\n        codeIdSum++;\n        if (codeIdSum % 4 === 0) {\n          index++;\n          getAsyncAxios(`/OSPApplication/general/generateQRCode/${codeIdList.join(\",\")}`, \"1000px\", index);\n          codeIdList = [];\n          codeIdSum = 0;\n        }\n      });\n      if (codeIdList.length > 0) {\n        index++;\n        getAsyncAxios(`/OSPApplication/general/generateQRCode/${codeIdList.join(\",\")}`, `${codeIdList.length * 250}px`, index);\n      }\n      if (vc.$route.name !== \"ImgPicture\") {\n        vc.$router.push({\n          \"name\": \"ImgPicture\"\n        });\n        context.commit(\"clearQRCodeIdArr\");\n      }\n      async function getAsyncAxios(url, height, index) {\n        var axiosRespone = axios.get(url, {\n          responseType: 'blob'\n        });\n        await axiosRespone.then(Response => {\n          const blob = new Blob([Response.data], {\n            type: Response.data.type\n          });\n          const imageUrl = URL.createObjectURL(blob);\n          context.commit(\"setQrCodePictureArr\", {\n            imageUrl,\n            height,\n            index\n          });\n          context.commit(\"sortQrCodePictureArr\", Math.round(lengthQrId / 4));\n        });\n        // $.get({\n        //     url,\n        //     responseType:'blob',\n        //     async:false,\n        //     success(data){\n        //     const blob = new Blob([data], { type: \"image/png\" });\n        //     const imageUrl = URL.createObjectURL(blob);\n        //     context.commit(\"setQrCodePictureArr\",{imageUrl,height});\n        //     }\n        // })\n      }\n    }\n  },\n\n  state: {\n    QRCodeIdArr: [],\n    QrCodePictureArr: []\n  }\n};","map":{"version":3,"names":["axios","namespaced","mutations","setQRCodeIdArr","state","idArr","QRCodeIdArr","setQrCodePictureArr","picture","QrCodePictureArr","push","clearQrCodePictureArr","length","pop","clearQRCodeIdArr","sortQrCodePictureArr","i","j","index","QrCodePicture","console","log","actions","getQRCodePictureArr","context","vc","commit","root","codeIdSum","codeIdList","lengthQrId","map","codeIdMap","cabinetName","getAsyncAxios","join","$route","name","$router","url","height","axiosRespone","get","responseType","then","Response","blob","Blob","data","type","imageUrl","URL","createObjectURL","Math","round"],"sources":["C:/Users/ainizuofurong/Desktop/vue_electronic_archives/src/store/QRcode.js"],"sourcesContent":["import axios from \"axios\";\r\n// import $ from \"jquery\";\r\nexport default {\r\n    namespaced:true,\r\n    mutations:{\r\n        setQRCodeIdArr(state,idArr){\r\n            state.QRCodeIdArr = idArr;\r\n        },\r\n        setQrCodePictureArr(state,picture){\r\n            state.QrCodePictureArr.push(picture);\r\n        },\r\n        clearQrCodePictureArr(state){\r\n            if(state.QrCodePictureArr.length>0){\r\n                while(state.QrCodePictureArr.pop()){}\r\n            }\r\n        },\r\n        clearQRCodeIdArr(state){\r\n            if(state.QRCodeIdArr.length>0){\r\n                while(state.QRCodeIdArr.pop()){}\r\n            }\r\n        },\r\n        sortQrCodePictureArr(state,length){\r\n            var QrCodePictureArr = [];\r\n            if(length === state.QrCodePictureArr.length){\r\n                for(let i=1;i<=length;i++){\r\n                    for(let j = 0; j<length;j++){\r\n                        if( state.QrCodePictureArr[j].index === i){\r\n                            var QrCodePicture = state.QrCodePictureArr[j]\r\n                            QrCodePictureArr.push(QrCodePicture);\r\n                           }\r\n                    }\r\n                }\r\n            }\r\n            console.log(QrCodePictureArr);\r\n        }\r\n    },\r\n    actions:{\r\n       getQRCodePictureArr(context,vc){\r\n        context.commit(\"clearQrCodePictureArr\");\r\n        if(context.state.QRCodeIdArr===null || context.state.QRCodeIdArr === \"\" || context.state.QRCodeIdArr.length===0){\r\n            context.commit(\"grounding/setWarningMsg\",{\"message\":\"请选择一条数据后再点击生成二维码！\",\"type\":\"error\"},{root:true});\r\n            return;\r\n        }\r\n        var codeIdSum = 0;\r\n        var codeIdList = [];\r\n        var index = 0;\r\n        var lengthQrId = context.state.QRCodeIdArr.length;\r\n        context.state.QRCodeIdArr.map(codeIdMap => {\r\n            codeIdList.push(codeIdMap.cabinetName);\r\n            codeIdSum++;\r\n            if(codeIdSum%4===0){\r\n                index++;\r\n                getAsyncAxios(`/OSPApplication/general/generateQRCode/${codeIdList.join(\",\")}`,\"1000px\",index);\r\n                codeIdList = [];\r\n                codeIdSum = 0;\r\n            }\r\n        });\r\n        if(codeIdList.length>0){\r\n            index++;\r\n            getAsyncAxios(`/OSPApplication/general/generateQRCode/${codeIdList.join(\",\")}`,`${(codeIdList.length*250)}px`,index);\r\n        }\r\n        if(vc.$route.name !==\"ImgPicture\"){\r\n            vc.$router.push({\"name\":\"ImgPicture\"});\r\n            context.commit(\"clearQRCodeIdArr\");\r\n            \r\n          }\r\n        async function getAsyncAxios(url,height,index){\r\n            var axiosRespone = axios.get(url,{\r\n                responseType: 'blob',\r\n            });\r\n            await axiosRespone.then(Response=>{\r\n                const blob = new Blob([Response.data], { type: Response.data.type });\r\n                const imageUrl = URL.createObjectURL(blob);\r\n                context.commit(\"setQrCodePictureArr\",{imageUrl,height,index});\r\n                context.commit(\"sortQrCodePictureArr\",Math.round(lengthQrId/4));\r\n        });\r\n        // $.get({\r\n        //     url,\r\n        //     responseType:'blob',\r\n        //     async:false,\r\n        //     success(data){\r\n        //     const blob = new Blob([data], { type: \"image/png\" });\r\n        //     const imageUrl = URL.createObjectURL(blob);\r\n        //     context.commit(\"setQrCodePictureArr\",{imageUrl,height});\r\n        //     }\r\n        // })\r\n        }\r\n       }\r\n    },\r\n    state:{\r\n       QRCodeIdArr:[],\r\n       QrCodePictureArr:[]\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}