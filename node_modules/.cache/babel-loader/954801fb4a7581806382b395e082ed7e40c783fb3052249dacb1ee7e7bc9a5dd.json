{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport axios from \"axios\";\n// import $ from \"jquery\";\nexport default {\n  namespaced: true,\n  mutations: {\n    setQRCodeIdArr(state, idArr) {\n      state.QRCodeIdArr = idArr;\n    },\n    setQrCodePictureArr(state, picture) {\n      state.QrCodePictureArr.push(picture);\n    },\n    clearQrCodePictureArr(state) {\n      if (state.QrCodePictureArr.length > 0) {\n        while (state.QrCodePictureArr.pop()) {}\n      }\n    },\n    clearQRCodeIdArr(state) {\n      if (state.QRCodeIdArr.length > 0) {\n        while (state.QRCodeIdArr.pop()) {}\n      }\n    }\n  },\n  actions: {\n    async getQRCodePictureArr(context, vc) {\n      context.commit(\"clearQrCodePictureArr\");\n      if (context.state.QRCodeIdArr === null || context.state.QRCodeIdArr === \"\" || context.state.QRCodeIdArr.length === 0) {\n        context.commit(\"grounding/setWarningMsg\", {\n          message: \"请选择一条数据后再点击生成二维码！\",\n          type: \"error\"\n        }, {\n          root: true\n        });\n        return;\n      }\n      var codeIdSum = 0;\n      var codeIdList = [];\n      var index = 0;\n      context.state.QRCodeIdArr.forEach(async codeIdMap => {\n        codeIdList.push(codeIdMap.cabinetName);\n        codeIdSum++;\n        if (codeIdSum % 4 === 0) {\n          index++;\n          if (codeIdList.length > 0) {\n            await getAsyncAxios(`/OSPApplication/general/generateQRCode/${codeIdList.join(\",\")}`, \"1000px\", index, codeIdList);\n          }\n          codeIdList = [];\n          codeIdSum = 0;\n        }\n      });\n      if (codeIdList.length > 0) {\n        index++;\n        await getAsyncAxios(`/OSPApplication/general/generateQRCode/${codeIdList.join(\",\")}`, `${codeIdList.length * 250}px`, index);\n        codeIdList = [];\n      }\n      if (vc.$route.name !== \"ImgPicture\") {\n        vc.$router.push({\n          name: \"ImgPicture\"\n        });\n        context.commit(\"clearQRCodeIdArr\");\n      }\n      function getAsyncAxios(url, height, index) {\n        var axiosRespone = axios.get(url, {\n          responseType: \"blob\"\n        });\n        axiosRespone.then(Response => {\n          const blob = new Blob([Response.data], {\n            type: Response.data.type\n          });\n          const imageUrl = URL.createObjectURL(blob);\n          context.commit(\"setQrCodePictureArr\", {\n            imageUrl,\n            height,\n            index\n          });\n        });\n        // $.get({\n        //     url,\n        //     responseType:'blob',\n        //     async:false,\n        //     success(data){\n        //     const blob = new Blob([data], { type: \"image/png\" });\n        //     const imageUrl = URL.createObjectURL(blob);\n        //     context.commit(\"setQrCodePictureArr\",{imageUrl,height});\n        //     }\n        // })\n      }\n    }\n  },\n\n  state: {\n    QRCodeIdArr: [],\n    QrCodePictureArr: []\n  }\n};","map":{"version":3,"names":["axios","namespaced","mutations","setQRCodeIdArr","state","idArr","QRCodeIdArr","setQrCodePictureArr","picture","QrCodePictureArr","push","clearQrCodePictureArr","length","pop","clearQRCodeIdArr","actions","getQRCodePictureArr","context","vc","commit","message","type","root","codeIdSum","codeIdList","index","forEach","codeIdMap","cabinetName","getAsyncAxios","join","$route","name","$router","url","height","axiosRespone","get","responseType","then","Response","blob","Blob","data","imageUrl","URL","createObjectURL"],"sources":["C:/Users/ainizuofurong/Desktop/vue_electronic_archives/src/store/QRcode.js"],"sourcesContent":["import axios from \"axios\";\r\n// import $ from \"jquery\";\r\nexport default {\r\n  namespaced: true,\r\n  mutations: {\r\n    setQRCodeIdArr(state, idArr) {\r\n      state.QRCodeIdArr = idArr;\r\n    },\r\n    setQrCodePictureArr(state, picture) {\r\n      state.QrCodePictureArr.push(picture);\r\n    },\r\n    clearQrCodePictureArr(state) {\r\n      if (state.QrCodePictureArr.length > 0) {\r\n        while (state.QrCodePictureArr.pop()) {}\r\n      }\r\n    },\r\n    clearQRCodeIdArr(state) {\r\n      if (state.QRCodeIdArr.length > 0) {\r\n        while (state.QRCodeIdArr.pop()) {}\r\n      }\r\n    },\r\n  },\r\n  actions: {\r\n    async getQRCodePictureArr(context, vc) {\r\n      context.commit(\"clearQrCodePictureArr\");\r\n      if (\r\n        context.state.QRCodeIdArr === null ||\r\n        context.state.QRCodeIdArr === \"\" ||\r\n        context.state.QRCodeIdArr.length === 0\r\n      ) {\r\n        context.commit(\r\n          \"grounding/setWarningMsg\",\r\n          { message: \"请选择一条数据后再点击生成二维码！\", type: \"error\" },\r\n          { root: true }\r\n        );\r\n        return;\r\n      }\r\n      var codeIdSum = 0;\r\n      var codeIdList = [];\r\n      var index = 0;\r\n      context.state.QRCodeIdArr.forEach(async (codeIdMap) => {\r\n        codeIdList.push(codeIdMap.cabinetName);\r\n        codeIdSum++;\r\n        if (codeIdSum % 4 === 0) {\r\n          index++;\r\n          if (codeIdList.length > 0) {\r\n            await getAsyncAxios(\r\n              `/OSPApplication/general/generateQRCode/${codeIdList.join(\",\")}`,\r\n              \"1000px\",\r\n              index,\r\n              codeIdList\r\n            );\r\n          }\r\n          codeIdList = [];\r\n          codeIdSum = 0;\r\n        }\r\n      });\r\n      if (codeIdList.length > 0) {\r\n        index++;\r\n        await getAsyncAxios(\r\n          `/OSPApplication/general/generateQRCode/${codeIdList.join(\",\")}`,\r\n          `${codeIdList.length * 250}px`,\r\n          index\r\n        );\r\n        codeIdList = [];\r\n      }\r\n      if (vc.$route.name !== \"ImgPicture\") {\r\n        vc.$router.push({ name: \"ImgPicture\" });\r\n        context.commit(\"clearQRCodeIdArr\");\r\n      }\r\n      function getAsyncAxios(url, height, index) {\r\n        var axiosRespone = axios.get(url, {\r\n          responseType: \"blob\",\r\n        });\r\n        axiosRespone.then((Response) => {\r\n          const blob = new Blob([Response.data], { type: Response.data.type });\r\n          const imageUrl = URL.createObjectURL(blob);\r\n          context.commit(\"setQrCodePictureArr\", { imageUrl, height, index });\r\n        });\r\n        // $.get({\r\n        //     url,\r\n        //     responseType:'blob',\r\n        //     async:false,\r\n        //     success(data){\r\n        //     const blob = new Blob([data], { type: \"image/png\" });\r\n        //     const imageUrl = URL.createObjectURL(blob);\r\n        //     context.commit(\"setQrCodePictureArr\",{imageUrl,height});\r\n        //     }\r\n        // })\r\n      }\r\n    },\r\n  },\r\n  state: {\r\n    QRCodeIdArr: [],\r\n    QrCodePictureArr: [],\r\n  },\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}