{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport axios from \"axios\";\nexport default {\n  namespaced: true,\n  mutations: {\n    setQRCodeIdArr(state, idArr) {\n      state.QRCodeIdArr = idArr;\n    },\n    setQrCodePictureArr(state, picture) {\n      state.QrCodePictureArr.push(picture);\n    },\n    clearQrCodePictureArr(state) {\n      while (state.QrCodePictureArr.pop()) {}\n    }\n  },\n  actions: {\n    getQRCodePictureArr(context) {\n      context.state.QRCodeIdArr.forEach(codeIdMap => {\n        axios.get(`/OSPApplication/general/generateQRCode/${codeIdMap.archiveCenterId}`, {\n          responseType: 'blob'\n        }).then(Response => {\n          const blob = new Blob([Response.data], {\n            type: Response.data.type\n          });\n          const imageUrl = URL.createObjectURL(blob);\n          context.commit(\"setQrCodePictureArr\", imageUrl);\n        });\n      });\n    }\n  },\n  state: {\n    QRCodeIdArr: [],\n    QrCodePictureArr: []\n  }\n};","map":{"version":3,"names":["axios","namespaced","mutations","setQRCodeIdArr","state","idArr","QRCodeIdArr","setQrCodePictureArr","picture","QrCodePictureArr","push","clearQrCodePictureArr","pop","actions","getQRCodePictureArr","context","forEach","codeIdMap","get","archiveCenterId","responseType","then","Response","blob","Blob","data","type","imageUrl","URL","createObjectURL","commit"],"sources":["C:/Users/ainizuofurong/Desktop/vue_electronic_archives/src/store/QRcode.js"],"sourcesContent":["import axios from \"axios\";\r\nexport default {\r\n    namespaced:true,\r\n    mutations:{\r\n        setQRCodeIdArr(state,idArr){\r\n            state.QRCodeIdArr = idArr;\r\n        },\r\n        setQrCodePictureArr(state,picture){\r\n            state.QrCodePictureArr.push(picture);\r\n        },\r\n        clearQrCodePictureArr(state){\r\n            while(state.QrCodePictureArr.pop()){}\r\n        }\r\n    },\r\n    actions:{\r\n       getQRCodePictureArr(context){\r\n        context.state.QRCodeIdArr.forEach(codeIdMap => {\r\n            axios.get(`/OSPApplication/general/generateQRCode/${codeIdMap.archiveCenterId}`,{\r\n                responseType: 'blob'\r\n            }).then(Response=>{\r\n                    const blob = new Blob([Response.data], { type: Response.data.type });\r\n                    const imageUrl = URL.createObjectURL(blob);\r\n                    context.commit(\"setQrCodePictureArr\",imageUrl);\r\n            })\r\n        });\r\n       }\r\n    },\r\n    state:{\r\n       QRCodeIdArr:[],\r\n       QrCodePictureArr:[]\r\n    }\r\n}"],"mappings":";;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,eAAe;EACXC,UAAU,EAAC,IAAI;EACfC,SAAS,EAAC;IACNC,cAAcA,CAACC,KAAK,EAACC,KAAK,EAAC;MACvBD,KAAK,CAACE,WAAW,GAAGD,KAAK;IAC7B,CAAC;IACDE,mBAAmBA,CAACH,KAAK,EAACI,OAAO,EAAC;MAC9BJ,KAAK,CAACK,gBAAgB,CAACC,IAAI,CAACF,OAAO,CAAC;IACxC,CAAC;IACDG,qBAAqBA,CAACP,KAAK,EAAC;MACxB,OAAMA,KAAK,CAACK,gBAAgB,CAACG,GAAG,CAAC,CAAC,EAAC,CAAC;IACxC;EACJ,CAAC;EACDC,OAAO,EAAC;IACLC,mBAAmBA,CAACC,OAAO,EAAC;MAC3BA,OAAO,CAACX,KAAK,CAACE,WAAW,CAACU,OAAO,CAACC,SAAS,IAAI;QAC3CjB,KAAK,CAACkB,GAAG,CAAE,0CAAyCD,SAAS,CAACE,eAAgB,EAAC,EAAC;UAC5EC,YAAY,EAAE;QAClB,CAAC,CAAC,CAACC,IAAI,CAACC,QAAQ,IAAE;UACV,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACF,QAAQ,CAACG,IAAI,CAAC,EAAE;YAAEC,IAAI,EAAEJ,QAAQ,CAACG,IAAI,CAACC;UAAK,CAAC,CAAC;UACpE,MAAMC,QAAQ,GAAGC,GAAG,CAACC,eAAe,CAACN,IAAI,CAAC;UAC1CR,OAAO,CAACe,MAAM,CAAC,qBAAqB,EAACH,QAAQ,CAAC;QACtD,CAAC,CAAC;MACN,CAAC,CAAC;IACH;EACH,CAAC;EACDvB,KAAK,EAAC;IACHE,WAAW,EAAC,EAAE;IACdG,gBAAgB,EAAC;EACpB;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}