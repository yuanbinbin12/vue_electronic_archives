{"ast":null,"code":"export default {\n  name: 'SplitPane',\n  props: {\n    // 参数值内容row, column 默认横向拖动，\n    direction: {\n      type: String,\n      default: 'row'\n    },\n    // 区域one最小宽度百分比\n    min: {\n      type: Number,\n      default: 10\n    },\n    // 区域one最大宽度百分比\n    max: {\n      type: Number,\n      default: 90\n    },\n    // 区域one百分比\n    paneLengthPercent: {\n      type: Number,\n      default: 50\n    },\n    // 拖动条宽度px\n    triggerLength: {\n      type: Number,\n      default: 10\n    }\n  },\n  data() {\n    return {\n      triggerLeftOffset: 0 // 鼠标距滑动器左(顶)侧偏移量\n    };\n  },\n\n  computed: {\n    lengthType() {\n      return this.direction === 'row' ? 'width' : 'height';\n    },\n    paneLengthValue() {\n      return `calc(${this.paneLengthPercent}% - ${this.triggerLength / 2 + 'px'})`;\n    },\n    triggerLengthValue() {\n      return this.triggerLength + 'px';\n    }\n  },\n  methods: {\n    // 按下滑动器\n    handleMouseDown(e) {\n      document.addEventListener('mousemove', this.handleMouseMove);\n      document.addEventListener('mouseup', this.handleMouseUp);\n      if (this.direction === 'row') {\n        this.triggerLeftOffset = e.pageX - e.srcElement.getBoundingClientRect().left;\n      } else {\n        this.triggerLeftOffset = e.pageY - e.srcElement.getBoundingClientRect().top;\n      }\n    },\n    // 按下滑动器后移动鼠标\n    handleMouseMove(e) {\n      const clientRect = this.$refs.splitPane.getBoundingClientRect();\n      let paneLengthPercent = 0;\n      if (this.direction === 'row') {\n        const offset = e.pageX - clientRect.left - this.triggerLeftOffset + this.triggerLength / 2;\n        paneLengthPercent = offset / clientRect.width * 100;\n      } else {\n        const offset = e.pageY - clientRect.top - this.triggerLeftOffset + this.triggerLength / 2;\n        paneLengthPercent = offset / clientRect.height * 100;\n      }\n      if (paneLengthPercent < this.min) {\n        paneLengthPercent = this.min;\n      }\n      if (paneLengthPercent > this.max) {\n        paneLengthPercent = this.max;\n      }\n      this.$emit('update:paneLengthPercent', paneLengthPercent);\n    },\n    // 松开滑动器\n    handleMouseUp() {\n      document.removeEventListener('mousemove', this.handleMouseMove);\n    }\n  }\n};","map":{"version":3,"names":["name","props","direction","type","String","default","min","Number","max","paneLengthPercent","triggerLength","data","triggerLeftOffset","computed","lengthType","paneLengthValue","triggerLengthValue","methods","handleMouseDown","e","document","addEventListener","handleMouseMove","handleMouseUp","pageX","srcElement","getBoundingClientRect","left","pageY","top","clientRect","$refs","splitPane","offset","width","height","$emit","removeEventListener"],"sources":["src/SplitPane/index.vue"],"sourcesContent":["<template>\r\n  <div ref=\"splitPane\" class=\"split-pane\" :class=\"direction\" :style=\"{ flexDirection: direction }\">\r\n    <div class=\"pane pane-one\" :style=\"lengthType + ':' + paneLengthValue\">\r\n      <slot name=\"one\" />\r\n    </div>\r\n    <div\r\n      class=\"pane-trigger\"\r\n      :style=\"lengthType + ':' + triggerLengthValue\"\r\n      @mousedown=\"handleMouseDown\"/>\r\n    <div class=\"pane pane-two\">\r\n      <slot name=\"two\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'SplitPane',\r\n  props: {\r\n    // 参数值内容row, column 默认横向拖动，\r\n    direction: {\r\n      type: String,\r\n      default: 'row'\r\n    },\r\n    // 区域one最小宽度百分比\r\n    min: {\r\n      type: Number,\r\n      default: 10\r\n    },\r\n    // 区域one最大宽度百分比\r\n    max: {\r\n      type: Number,\r\n      default: 90\r\n    },\r\n    // 区域one百分比\r\n    paneLengthPercent: {\r\n      type: Number,\r\n      default: 50\r\n    },\r\n    // 拖动条宽度px\r\n    triggerLength: {\r\n      type: Number,\r\n      default: 10\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      triggerLeftOffset: 0 // 鼠标距滑动器左(顶)侧偏移量\r\n    }\r\n  },\r\n  computed: {\r\n    lengthType() {\r\n      return this.direction === 'row' ? 'width' : 'height'\r\n    },\r\n\r\n    paneLengthValue() {\r\n      return `calc(${this.paneLengthPercent}% - ${this.triggerLength / 2 + 'px'})`\r\n    },\r\n\r\n    triggerLengthValue() {\r\n      return this.triggerLength + 'px'\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    // 按下滑动器\r\n    handleMouseDown(e) {\r\n      document.addEventListener('mousemove', this.handleMouseMove)\r\n      document.addEventListener('mouseup', this.handleMouseUp)\r\n\r\n      if (this.direction === 'row') {\r\n        this.triggerLeftOffset = e.pageX - e.srcElement.getBoundingClientRect().left\r\n      } else {\r\n        this.triggerLeftOffset = e.pageY - e.srcElement.getBoundingClientRect().top\r\n      }\r\n    },\r\n\r\n    // 按下滑动器后移动鼠标\r\n    handleMouseMove(e) {\r\n      const clientRect = this.$refs.splitPane.getBoundingClientRect()\r\n      let paneLengthPercent = 0\r\n\r\n      if (this.direction === 'row') {\r\n        const offset = e.pageX - clientRect.left - this.triggerLeftOffset + this.triggerLength / 2\r\n        paneLengthPercent = (offset / clientRect.width) * 100\r\n      } else {\r\n        const offset = e.pageY - clientRect.top - this.triggerLeftOffset + this.triggerLength / 2\r\n        paneLengthPercent = (offset / clientRect.height) * 100\r\n      }\r\n\r\n      if (paneLengthPercent < this.min) {\r\n        paneLengthPercent = this.min\r\n      }\r\n      if (paneLengthPercent > this.max) {\r\n        paneLengthPercent = this.max\r\n      }\r\n\r\n      this.$emit('update:paneLengthPercent', paneLengthPercent)\r\n    },\r\n\r\n    // 松开滑动器\r\n    handleMouseUp() {\r\n      document.removeEventListener('mousemove', this.handleMouseMove)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.split-pane {\r\n  height: 100%;\r\n  display: flex;\r\n\r\n  &.row {\r\n    .pane {\r\n      height: 100%;\r\n    }\r\n    .pane-trigger {\r\n      height: 100%;\r\n      cursor: col-resize;\r\n    }\r\n  }\r\n\r\n  &.column {\r\n    .pane {\r\n      width: 100%;\r\n    }\r\n    .pane-trigger {\r\n      width: 100%;\r\n      cursor: row-resize;\r\n    }\r\n  }\r\n  .pane-trigger {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    user-select: none;\r\n  }\r\n  .pane-two {\r\n    flex: 1;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"AAgBA;EACAA,IAAA;EACAC,KAAA;IACA;IACAC,SAAA;MACAC,IAAA,EAAAC,MAAA;MACAC,OAAA;IACA;IACA;IACAC,GAAA;MACAH,IAAA,EAAAI,MAAA;MACAF,OAAA;IACA;IACA;IACAG,GAAA;MACAL,IAAA,EAAAI,MAAA;MACAF,OAAA;IACA;IACA;IACAI,iBAAA;MACAN,IAAA,EAAAI,MAAA;MACAF,OAAA;IACA;IACA;IACAK,aAAA;MACAP,IAAA,EAAAI,MAAA;MACAF,OAAA;IACA;EACA;EACAM,KAAA;IACA;MACAC,iBAAA;IACA;EACA;;EACAC,QAAA;IACAC,WAAA;MACA,YAAAZ,SAAA;IACA;IAEAa,gBAAA;MACA,oBAAAN,iBAAA,YAAAC,aAAA;IACA;IAEAM,mBAAA;MACA,YAAAN,aAAA;IACA;EACA;EAEAO,OAAA;IACA;IACAC,gBAAAC,CAAA;MACAC,QAAA,CAAAC,gBAAA,mBAAAC,eAAA;MACAF,QAAA,CAAAC,gBAAA,iBAAAE,aAAA;MAEA,SAAArB,SAAA;QACA,KAAAU,iBAAA,GAAAO,CAAA,CAAAK,KAAA,GAAAL,CAAA,CAAAM,UAAA,CAAAC,qBAAA,GAAAC,IAAA;MACA;QACA,KAAAf,iBAAA,GAAAO,CAAA,CAAAS,KAAA,GAAAT,CAAA,CAAAM,UAAA,CAAAC,qBAAA,GAAAG,GAAA;MACA;IACA;IAEA;IACAP,gBAAAH,CAAA;MACA,MAAAW,UAAA,QAAAC,KAAA,CAAAC,SAAA,CAAAN,qBAAA;MACA,IAAAjB,iBAAA;MAEA,SAAAP,SAAA;QACA,MAAA+B,MAAA,GAAAd,CAAA,CAAAK,KAAA,GAAAM,UAAA,CAAAH,IAAA,QAAAf,iBAAA,QAAAF,aAAA;QACAD,iBAAA,GAAAwB,MAAA,GAAAH,UAAA,CAAAI,KAAA;MACA;QACA,MAAAD,MAAA,GAAAd,CAAA,CAAAS,KAAA,GAAAE,UAAA,CAAAD,GAAA,QAAAjB,iBAAA,QAAAF,aAAA;QACAD,iBAAA,GAAAwB,MAAA,GAAAH,UAAA,CAAAK,MAAA;MACA;MAEA,IAAA1B,iBAAA,QAAAH,GAAA;QACAG,iBAAA,QAAAH,GAAA;MACA;MACA,IAAAG,iBAAA,QAAAD,GAAA;QACAC,iBAAA,QAAAD,GAAA;MACA;MAEA,KAAA4B,KAAA,6BAAA3B,iBAAA;IACA;IAEA;IACAc,cAAA;MACAH,QAAA,CAAAiB,mBAAA,mBAAAf,eAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}