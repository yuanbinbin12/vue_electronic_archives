{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nexport default {\n  namespaced: true,\n  mutations: {\n    setQRCodeIdArr(state, idArr) {\n      state.QRCodeIdArr = idArr;\n    },\n    setQrCodePictureArr(state, picture) {\n      state.QrCodePictureArr.push(picture);\n    }\n  },\n  actions: {\n    getQRCodePictureArr(context) {\n      context.state.QRCodeIdArr.forEach(codeIdMap => {\n        axios.get(`/OSPApplication/general/generateQRCode/${codeIdMap.archiveCenterId}`, {\n          ContentType: \"mage/png;charset=UTF-8\"\n        }).then(Response => {\n          if (Response.data.code === \"0\") {\n            const blob = new Blob([Response.data], {\n              type: response.data.type\n            });\n            context.commit(\"setQrCodePictureArr\", blob);\n          } else {\n            console.log(Response.data.message);\n            context.commit(\"grounding/setWarningMsg\", {\n              \"message\": Response.data.message,\n              \"type\": \"error\"\n            }, {\n              root: true\n            });\n          }\n        });\n      });\n    }\n  },\n  state: {\n    QRCodeIdArr: [],\n    QrCodePictureArr: []\n  }\n};","map":{"version":3,"names":["axios","namespaced","mutations","setQRCodeIdArr","state","idArr","QRCodeIdArr","setQrCodePictureArr","picture","QrCodePictureArr","push","actions","getQRCodePictureArr","context","forEach","codeIdMap","get","archiveCenterId","ContentType","then","Response","data","code","blob","Blob","type","response","commit","console","log","message","root"],"sources":["C:/Users/ainizuofurong/Desktop/vue_electronic_archives/src/store/QRcode.js"],"sourcesContent":["import axios from \"axios\";\r\nexport default {\r\n    namespaced:true,\r\n    mutations:{\r\n        setQRCodeIdArr(state,idArr){\r\n            state.QRCodeIdArr = idArr;\r\n        },\r\n        setQrCodePictureArr(state,picture){\r\n            state.QrCodePictureArr.push(picture);\r\n        }\r\n    },\r\n    actions:{\r\n       getQRCodePictureArr(context){\r\n        context.state.QRCodeIdArr.forEach(codeIdMap => {\r\n            axios.get(`/OSPApplication/general/generateQRCode/${codeIdMap.archiveCenterId}`,{\r\n                ContentType:\"mage/png;charset=UTF-8\"\r\n            }).then(Response=>{\r\n                if(Response.data.code===\"0\"){\r\n                    const blob = new Blob([Response.data], { type: response.data.type });\r\n                    context.commit(\"setQrCodePictureArr\",blob);\r\n                }else{\r\n                    console.log(Response.data.message);\r\n                    context.commit(\"grounding/setWarningMsg\",{\"message\":Response.data.message,\"type\":\"error\"},{root:true});\r\n                }\r\n            })\r\n        });\r\n       }\r\n    },\r\n    state:{\r\n       QRCodeIdArr:[],\r\n       QrCodePictureArr:[]\r\n    }\r\n}"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,eAAe;EACXC,UAAU,EAAC,IAAI;EACfC,SAAS,EAAC;IACNC,cAAcA,CAACC,KAAK,EAACC,KAAK,EAAC;MACvBD,KAAK,CAACE,WAAW,GAAGD,KAAK;IAC7B,CAAC;IACDE,mBAAmBA,CAACH,KAAK,EAACI,OAAO,EAAC;MAC9BJ,KAAK,CAACK,gBAAgB,CAACC,IAAI,CAACF,OAAO,CAAC;IACxC;EACJ,CAAC;EACDG,OAAO,EAAC;IACLC,mBAAmBA,CAACC,OAAO,EAAC;MAC3BA,OAAO,CAACT,KAAK,CAACE,WAAW,CAACQ,OAAO,CAACC,SAAS,IAAI;QAC3Cf,KAAK,CAACgB,GAAG,CAAE,0CAAyCD,SAAS,CAACE,eAAgB,EAAC,EAAC;UAC5EC,WAAW,EAAC;QAChB,CAAC,CAAC,CAACC,IAAI,CAACC,QAAQ,IAAE;UACd,IAAGA,QAAQ,CAACC,IAAI,CAACC,IAAI,KAAG,GAAG,EAAC;YACxB,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACJ,QAAQ,CAACC,IAAI,CAAC,EAAE;cAAEI,IAAI,EAAEC,QAAQ,CAACL,IAAI,CAACI;YAAK,CAAC,CAAC;YACpEZ,OAAO,CAACc,MAAM,CAAC,qBAAqB,EAACJ,IAAI,CAAC;UAC9C,CAAC,MAAI;YACDK,OAAO,CAACC,GAAG,CAACT,QAAQ,CAACC,IAAI,CAACS,OAAO,CAAC;YAClCjB,OAAO,CAACc,MAAM,CAAC,yBAAyB,EAAC;cAAC,SAAS,EAACP,QAAQ,CAACC,IAAI,CAACS,OAAO;cAAC,MAAM,EAAC;YAAO,CAAC,EAAC;cAACC,IAAI,EAAC;YAAI,CAAC,CAAC;UAC1G;QACJ,CAAC,CAAC;MACN,CAAC,CAAC;IACH;EACH,CAAC;EACD3B,KAAK,EAAC;IACHE,WAAW,EAAC,EAAE;IACdG,gBAAgB,EAAC;EACpB;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}